{"version":3,"sources":["constants/index.ts","components/ChartExamples/utils.ts","components/ChartExamples/PieChart.tsx","components/ChartExamples/RadarChart.tsx","components/ChartExamples/BarChart.tsx","components/ChartExamples/HalfPieChart.tsx","components/IconSet.tsx","components/Lottie.tsx","components/Paper.tsx","utils/index.tsx","components/JSONEditor/index.tsx","components/ScreenContainer.tsx","screens/HomeScreen.tsx","App.tsx","hooks/useInitializer.ts"],"names":["BRAND_COLORS","Object","values","blue","orange","lightBlue","sort","KEYS","useChartTheme","country","theme","useTheme","colorMode","useColorMode","background","colors","textColor","fontSize","axis","domain","line","stroke","strokeWidth","ticks","grid","props","data","chartTheme","datum","margin","top","right","bottom","left","innerRadius","padAngle","cornerRadius","activeOuterRadiusOffset","borderWidth","borderColor","from","modifiers","arcLinkLabelsSkipAngle","arcLinkLabelsThickness","arcLinkLabelsColor","arcLabelsSkipAngle","arcLabelsTextColor","defs","id","type","color","size","padding","stagger","rotation","lineWidth","spacing","fill","match","legends","anchor","direction","translateX","translateY","itemWidth","itemHeight","itemTextColor","symbolSize","symbolShape","keys","indexBy","maxValue","curve","gridLevels","gridShape","gridLabelOffset","enableDots","dotSize","dotColor","dotBorderWidth","dotBorderColor","enableDotLabel","dotLabel","dotLabelYOffset","index","fillOpacity","animate","motionConfig","isInteractive","height","labelTextColor","labelSkipWidth","labelSkipHeight","c","layout","enableGridY","enableGridX","dataFrom","startAngle","endAngle","IconSet","React","forwardRef","forwardedRef","rest","ref","as","MaterialCommunityIcons","RESIZE_MODE","center","contain","cover","Lottie","wrapComponent","style","loop","source","uri","autoPlay","resizeMode","animationRef","useForwardRef","useMemo","R","useEffect","current","destroy","animationContainerNode","document","getElementById","animation","lottie","container","renderer","autoplay","path","animationData","rendererSettings","preserveAspectRatio","View","nativeID","isForwardRef","Paper","children","_light","_dark","backgroundColor","readTextFile","blob","encoding","a","async","Promise","res","rej","reader","FileReader","addEventListener","result","error","readAsText","JSONEditor","onChange","value","console","log","htmlElementProps","width","ace","ScrollView","contentContainerStyle","flexGrow","ScreenContainer","scrollable","hasKeyboardAvoidingView","isLoading","Container","KeyboardAvoidingView","Fragment","alignItems","justifyContent","flex","safeArea","CHART_KEYS","ChartExamples","b","HomeScreen","toast","useToast","windowDimensions","useWindowDimensions","initialData","urlSearchParams","URLSearchParams","window","location","search","params","fromEntries","entries","JSON","parse","useState","setData","status","setStatus","formVisible","setFormVisible","toggleColorMode","numColumns","useBreakpointValue","base","md","onCreateCharts","useCallback","DocumentPicker","file","fileText","setTimeout","show","title","description","stringify","onShare","link","origin","jsonToQuery","Clipboard","onUpdateData","scrollWidth","scrollHeight","html2canvas","windowWidth","windowHeight","toBlob","open","URL","createObjectURL","download","name","formData","w","fontWeight","flexDirection","p","space","onPress","visible","initial","opacity","scale","transition","duration","key","columnWrapperStyle","renderItem","chartName","item","Chart","h","obj","str","hasOwnProperty","push","encodeURIComponent","join","colorModeManager","get","AsyncStorage","getItem","val","set","setItem","App","isLoadingComplete","setLoadingComplete","SplashScreen","e","warn","useInitializer","config","NATIVE_BASE_CONFIG","StatusBar","dependencies","require","LinearGradient","extendTheme","initialColorMode","primary","50","100","200","300","400","500","600","700","800","900","components","Button","baseStyle","defaultProps","variants","linearGradient","_stack","bg","start","end","rounded"],"mappings":"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","file":"static/js/app.b2e4107d.chunk.js","sourcesContent":["export const BRAND_COLORS_MAP = {\n  blue: '#18376D',\n  orange: '#F57F17',\n  lightBlue: '#B8CCE4',\n}\n// export const BRAND_COLORS_MAP = {\n//   blue: '#203c65',\n//   orange: '#d58941',\n//   lightBlue: '#99a2bd',\n// }\n\nexport const BRAND_COLORS = Object.values(BRAND_COLORS_MAP).sort()\n\nexport const KEYS = ['FONDS', 'VERGELIJKBARE PENSIOENFONDSEN', 'ALLE DEELNEMENDE PENSIOENFONDSEN']\n\nexport const DATA = {\n  PieChart: [\n    {\n      id: KEYS[0],\n      label: KEYS[0],\n      value: 119,\n      color: BRAND_COLORS[0],\n    },\n    {\n      id: KEYS[1],\n      label: KEYS[1],\n      value: 69,\n      color: BRAND_COLORS[1],\n    },\n    {\n      id: KEYS[2],\n      label: KEYS[2],\n      value: 495,\n      color: BRAND_COLORS[2],\n    },\n  ],\n  RadarChart: [\n    {\n      [KEYS[0]]: 10,\n      [KEYS[1]]: 60,\n      [KEYS[2]]: 32,\n      color: BRAND_COLORS[0],\n    },\n    {\n      [KEYS[0]]: 20,\n      [KEYS[1]]: 70,\n      [KEYS[2]]: 72,\n      color: BRAND_COLORS[1],\n    },\n    {\n      [KEYS[0]]: 30,\n      [KEYS[1]]: 28,\n      [KEYS[2]]: 75,\n      color: BRAND_COLORS[2],\n    },\n  ],\n  BarChart: [\n    {\n      country: 'AD',\n      [KEYS[0]]: 24,\n      [`${KEYS[0]}Color`]: BRAND_COLORS[0],\n      [KEYS[1]]: 187,\n      [`${KEYS[1]}Color`]: BRAND_COLORS[1],\n      [KEYS[2]]: 86,\n      [`${KEYS[2]}Color`]: BRAND_COLORS[2],\n    },\n  ],\n  HalfPieChart: [\n    {\n      id: KEYS[0],\n      label: KEYS[0],\n      value: 119,\n      color: BRAND_COLORS[0],\n    },\n    {\n      id: KEYS[1],\n      label: KEYS[1],\n      value: 69,\n      color: BRAND_COLORS[1],\n    },\n    {\n      id: KEYS[2],\n      label: KEYS[2],\n      value: 495,\n      color: BRAND_COLORS[2],\n    },\n  ],\n}\n","import { useTheme, useColorMode } from 'native-base'\n\nexport const useChartTheme = () => {\n  const theme = useTheme()\n  const { colorMode } = useColorMode()\n  return [\n    {\n      background: theme.colors[colorMode]['50'],\n      textColor: theme.colors[colorMode]['900'],\n      fontSize: 11,\n      axis: {\n        domain: {\n          line: {\n            stroke: theme.colors[colorMode]['900'],\n            strokeWidth: 1,\n          },\n        },\n        ticks: {\n          line: {\n            stroke: theme.colors[colorMode]['900'],\n            strokeWidth: 1,\n          },\n        },\n      },\n      grid: {\n        line: {\n          stroke: theme.colors[colorMode]['900'],\n          strokeWidth: 1,\n        },\n      },\n    },\n    colorMode,\n  ]\n}\n\nexport const BRAND_COLORS_MAP = {\n  blue: '#203c65',\n  orange: '#d58941',\n  lightBlue: '#99a2bd',\n}\n\nexport const BRAND_COLORS = Object.values(BRAND_COLORS_MAP).sort()\n\nexport const KEYS = ['FONDS', 'VERGELIJKBARE PENSIOENFONDSEN', 'ALLE DEELNEMENDE PENSIOENFONDSEN']\n","import React from 'react'\nimport { ResponsivePie } from '@nivo/pie'\nimport { BRAND_COLORS, KEYS } from '@constants'\nimport { useChartTheme } from './utils'\n\nexport default (props) => {\n  const { data } = props\n  const [chartTheme] = useChartTheme()\n  return (\n    <ResponsivePie\n      data={data}\n      theme={chartTheme}\n      colors={{ datum: 'data.color' }}\n      margin={{\n        top: 40, right: 80, bottom: 80, left: 80,\n      }}\n      innerRadius={0.5}\n      padAngle={0.7}\n      cornerRadius={3}\n      activeOuterRadiusOffset={8}\n      borderWidth={1}\n      borderColor={{ from: 'color', modifiers: [['darker', 0.2]] }}\n      arcLinkLabelsSkipAngle={10}\n      arcLinkLabelsThickness={2}\n      arcLinkLabelsColor={{ from: 'color' }}\n      arcLabelsSkipAngle={10}\n      arcLabelsTextColor={{ theme: 'labels.text.fill' }}\n      // arcLabelsTextColor={{ from: 'color', modifiers: [['darker', 2]] }}\n      defs={[\n        {\n          id: 'dots',\n          type: 'patternDots',\n          background: 'inherit',\n          color: 'rgba(255, 255, 255, 0.3)',\n          size: 4,\n          padding: 1,\n          stagger: true,\n        },\n        {\n          id: 'lines',\n          type: 'patternLines',\n          background: 'inherit',\n          color: 'rgba(255, 255, 255, 0.3)',\n          rotation: -45,\n          lineWidth: 6,\n          spacing: 10,\n        },\n      ]}\n      fill={[\n        {\n          match: {\n            id: 'ruby',\n          },\n          id: 'dots',\n        },\n        {\n          match: {\n            id: 'c',\n          },\n          id: 'dots',\n        },\n        {\n          match: {\n            id: 'go',\n          },\n          id: 'dots',\n        },\n        {\n          match: {\n            id: 'python',\n          },\n          id: 'dots',\n        },\n        {\n          match: {\n            id: 'scala',\n          },\n          id: 'lines',\n        },\n        {\n          match: {\n            id: 'lisp',\n          },\n          id: 'lines',\n        },\n        {\n          match: {\n            id: 'elixir',\n          },\n          id: 'lines',\n        },\n        {\n          match: {\n            id: 'javascript',\n          },\n          id: 'lines',\n        },\n      ]}\n      legends={[\n        {\n          anchor: 'top-left',\n          direction: 'column',\n          translateX: -50,\n          translateY: -40,\n          itemWidth: 80,\n          itemHeight: 20,\n          itemTextColor: '#999',\n          symbolSize: 12,\n          symbolShape: 'circle',\n          // effects: [\n          //   {\n          //     on: 'hover',\n          //     style: {\n          //       itemTextColor: '#000',\n          //     },\n          //   },\n          // ],\n        },\n        // {\n        //   anchor: 'top',\n        //   direction: 'column',\n        //   justify: false,\n        //   translateX: -250,\n        //   translateY: 0,\n        //   itemsSpacing: 0,\n        //   itemWidth: 100,\n        //   itemHeight: 18,\n        //   itemTextColor: '#999',\n        //   itemDirection: 'left-to-right',\n        //   itemOpacity: 1,\n        //   symbolSize: 18,\n        //   symbolShape: 'circle',\n        //   effects: [\n        //     {\n        //       on: 'hover',\n        //       style: {\n        //         itemTextColor: '#000',\n        //       },\n        //     },\n        //   ],\n        // },\n      ]}\n    />\n  )\n}\n\nconst data = [\n  {\n    id: KEYS[0],\n    label: KEYS[0],\n    value: 119,\n    color: BRAND_COLORS[0],\n  },\n  {\n    id: KEYS[1],\n    label: KEYS[1],\n    value: 69,\n    color: BRAND_COLORS[1],\n  },\n  {\n    id: KEYS[2],\n    label: KEYS[2],\n    value: 495,\n    color: BRAND_COLORS[2],\n  },\n]\n","import React from 'react'\nimport { ResponsiveRadar } from '@nivo/radar'\nimport { BRAND_COLORS, KEYS } from '@constants'\nimport { useChartTheme } from './utils'\n\nexport default (props) => {\n  const { data } = props\n  const [chartTheme] = useChartTheme()\n  return (\n    <ResponsiveRadar\n      data={data}\n      theme={chartTheme}\n      keys={KEYS}\n      indexBy=\"taste\"\n      maxValue=\"auto\"\n      margin={{\n        top: 70, right: 80, bottom: 40, left: 80,\n      }}\n      curve=\"linearClosed\"\n      borderWidth={2}\n      borderColor={{ from: 'color' }}\n      gridLevels={5}\n      gridShape=\"circular\"\n      gridLabelOffset={36}\n      enableDots\n      dotSize={10}\n      dotColor={{ theme: 'background' }}\n      dotBorderWidth={2}\n      dotBorderColor={{ from: 'color' }}\n      enableDotLabel\n      dotLabel=\"value\"\n      dotLabelYOffset={-12}\n      colors={({ index }) => data[index].color}\n      fillOpacity={0.25}\n      // blendMode=\"multiply\"\n      animate\n      motionConfig=\"wobbly\"\n      isInteractive\n      legends={[\n        {\n          anchor: 'top-left',\n          // data: [{}]\n          direction: 'column',\n          translateX: -50,\n          translateY: -40,\n          itemWidth: 80,\n          itemHeight: 20,\n          itemTextColor: '#999',\n          symbolSize: 12,\n          symbolShape: 'circle',\n          // effects: [\n          //   {\n          //     on: 'hover',\n          //     style: {\n          //       itemTextColor: '#000',\n          //     },\n          //   },\n          // ],\n        },\n      ]}\n    />\n  )\n}\n\nconst data = [\n  {\n    [KEYS[0]]: 10,\n    [KEYS[1]]: 60,\n    [KEYS[2]]: 32,\n    color: BRAND_COLORS[0],\n  },\n  {\n    [KEYS[0]]: 20,\n    [KEYS[1]]: 70,\n    [KEYS[2]]: 72,\n    color: BRAND_COLORS[1],\n  },\n  {\n    [KEYS[0]]: 30,\n    [KEYS[1]]: 28,\n    [KEYS[2]]: 75,\n    color: BRAND_COLORS[2],\n  },\n]\n","import React from 'react'\nimport { ResponsiveBar, BarDatum } from '@nivo/bar'\nimport { BRAND_COLORS, KEYS } from '@constants'\nimport { useChartTheme } from './utils'\n\nexport default (props) => {\n  const { data } = props\n  const [chartTheme] = useChartTheme()\n  return (\n    <ResponsiveBar\n      // width: '100%',\n      height={250}\n      margin={{\n        top: 60, right: 110, bottom: 60, left: 80,\n      }}\n      data={data}\n      theme={chartTheme}\n      // data={data as BarDatum[]}\n      indexBy=\"country\"\n      keys={KEYS}\n      padding={0.2}\n  // labelTextColor={'inherit:darker(1.4)'}\n      labelTextColor={{ from: 'theme', theme: 'labels.text.fill' }}\n      labelSkipWidth={16}\n      labelSkipHeight={16}\n      colors={(c) => {\n        const {\n          id, data,\n        } = c\n        return data[`${id}Color`]\n      }}\n      layout=\"horizontal\"\n      enableGridY={false}\n      enableGridX\n      legends={[\n        {\n          dataFrom: 'keys',\n          anchor: 'top-left',\n          direction: 'column',\n          translateX: -50,\n          translateY: -60,\n          itemWidth: 80,\n          itemHeight: 20,\n          itemTextColor: '#999',\n          symbolSize: 12,\n          symbolShape: 'circle',\n          // effects: [\n          //   {\n          //     on: 'hover',\n          //     style: {\n          //       itemTextColor: '#000',\n          //     },\n          //   },\n          // ],\n        },\n      ]}\n    />\n  )\n}\n\nconst data = [\n  {\n    country: 'AD',\n    [KEYS[0]]: 24,\n    [`${KEYS[0]}Color`]: BRAND_COLORS[0],\n    [KEYS[1]]: 187,\n    [`${KEYS[1]}Color`]: BRAND_COLORS[1],\n    [KEYS[2]]: 86,\n    [`${KEYS[2]}Color`]: BRAND_COLORS[2],\n  },\n]\n","import React from 'react'\nimport { ResponsivePie } from '@nivo/pie'\nimport { BRAND_COLORS, KEYS } from '@constants'\nimport { useChartTheme } from './utils'\n\nexport default (props) => {\n  const { data } = props\n  const [chartTheme] = useChartTheme()\n  return (\n    <ResponsivePie\n      data={data}\n      theme={chartTheme}\n      colors={{ datum: 'data.color' }}\n      margin={{\n        top: 40, right: 80, bottom: 80, left: 80,\n      }}\n      startAngle={90}\n      endAngle={-90}\n      innerRadius={0.5}\n      padAngle={0.7}\n      cornerRadius={3}\n      activeOuterRadiusOffset={8}\n      borderWidth={1}\n      borderColor={{ from: 'color', modifiers: [['darker', 0.2]] }}\n      arcLinkLabelsSkipAngle={10}\n      arcLinkLabelsThickness={2}\n      arcLinkLabelsColor={{ from: 'color' }}\n      arcLabelsSkipAngle={10}\n      // arcLabelsTextColor={{ from: 'color', modifiers: [['darker', 2]] }}\n      arcLabelsTextColor={{ theme: 'labels.text.fill' }}\n      defs={[\n        {\n          id: 'dots',\n          type: 'patternDots',\n          background: 'inherit',\n          color: 'rgba(255, 255, 255, 0.3)',\n          size: 4,\n          padding: 1,\n          stagger: true,\n        },\n        {\n          id: 'lines',\n          type: 'patternLines',\n          background: 'inherit',\n          color: 'rgba(255, 255, 255, 0.3)',\n          rotation: -45,\n          lineWidth: 6,\n          spacing: 10,\n        },\n      ]}\n      fill={[\n        {\n          match: {\n            id: 'ruby',\n          },\n          id: 'dots',\n        },\n        {\n          match: {\n            id: 'c',\n          },\n          id: 'dots',\n        },\n        {\n          match: {\n            id: 'go',\n          },\n          id: 'dots',\n        },\n        {\n          match: {\n            id: 'python',\n          },\n          id: 'dots',\n        },\n        {\n          match: {\n            id: 'scala',\n          },\n          id: 'lines',\n        },\n        {\n          match: {\n            id: 'lisp',\n          },\n          id: 'lines',\n        },\n        {\n          match: {\n            id: 'elixir',\n          },\n          id: 'lines',\n        },\n        {\n          match: {\n            id: 'javascript',\n          },\n          id: 'lines',\n        },\n      ]}\n      legends={[\n        {\n          anchor: 'top-left',\n          direction: 'column',\n          translateX: -50,\n          translateY: -40,\n          itemWidth: 80,\n          itemHeight: 20,\n          itemTextColor: '#999',\n          symbolSize: 12,\n          symbolShape: 'circle',\n          // effects: [\n          //   {\n          //     on: 'hover',\n          //     style: {\n          //       itemTextColor: '#000',\n          //     },\n          //   },\n          // ],\n        },\n      ]}\n    />\n  )\n}\n\nconst data = [\n  {\n    id: KEYS[0],\n    label: KEYS[0],\n    value: 119,\n    color: BRAND_COLORS[0],\n  },\n  {\n    id: KEYS[1],\n    label: KEYS[1],\n    value: 69,\n    color: BRAND_COLORS[1],\n  },\n  {\n    id: KEYS[2],\n    label: KEYS[2],\n    value: 495,\n    color: BRAND_COLORS[2],\n  },\n]\n","import { MaterialCommunityIcons } from '@expo/vector-icons'\nimport { Icon, IIconProps } from 'native-base'\nimport React from 'react'\n\nexport const IconSet = React.forwardRef((props: IIconProps, forwardedRef) => {\n  const { ...rest } = props\n  return (\n    <Icon\n      ref={forwardedRef}\n      as={MaterialCommunityIcons}\n      {...rest}\n    />\n  )\n})\n","import React from 'react'\nimport * as lottie from 'lottie-web'\nimport { View } from 'react-native'\nimport { useForwardRef, wrapComponent } from 'colay-ui'\nimport * as R from 'colay/ramda'\n\nexport type LottieType = lottie.AnimationItem & {\n  totalFrames: number;\n}\n\nconst RESIZE_MODE = {\n  center: 'xMidYMid meet',\n  contain: 'xMinYMin meet',\n  cover: 'none',\n} as const\n\nfunction LottieElement(\n  props: LottieProps,\n  forwardRef: React.ForwardedRef<LottieType>,\n) {\n  const {\n    style,\n    loop,\n    source = { uri: 'https://assets2.lottiefiles.com/datafiles/Hc0DflKIkYg1j3u/data.json' },\n    autoPlay = true,\n    resizeMode = 'contain',\n  } = props\n  const animationRef = useForwardRef<lottie.AnimationItem>(forwardRef)\n  const id = React.useMemo(() => R.uuid(), [])\n  React.useEffect(\n    () => {\n      if (animationRef.current) {\n        animationRef.current.destroy()\n      }\n      const animationContainerNode = document.getElementById(id)\n      const animation = lottie.loadAnimation({\n        container: animationContainerNode,\n        renderer: 'svg',\n        loop,\n        autoplay: autoPlay,\n        ...(\n          // @ts-ignore\n          source.uri\n          // @ts-ignore\n            ? { path: source.uri }\n            : { animationData: source }\n        ),\n        rendererSettings: {\n          preserveAspectRatio: RESIZE_MODE[resizeMode],\n        },\n      })\n      animationRef.current = animation\n      // @ts-ignore\n      forwardRef?.(animation)\n      return () => animationRef.current?.destroy()\n    },\n    [autoPlay, loop, source],\n  )\n  return (\n    <View\n    // @ts-ignore\n      nativeID={id}\n      style={style}\n    />\n  )\n}\n\nexport const Lottie = wrapComponent<LottieProps>(\n  LottieElement,\n  {\n    isForwardRef: true,\n  },\n)\n","import React from 'react'\nimport {\n  Box,\n} from 'native-base'\n\nexport type PaperProps = React.ComponentPropsWithRef<typeof Box>\n\nexport const Paper = (props: PaperProps) => {\n  const {\n    children,\n    _light = {},\n    _dark = {},\n    ...rest\n  } = props\n  return (\n    <Box\n      {...rest}\n      _light={{\n        backgroundColor: 'light.50',\n        ..._light,\n      }}\n      _dark={{\n        backgroundColor: 'dark.50', // 'gray.700',\n        ..._dark,\n      }}\n    >\n      {children}\n    </Box>\n  )\n}\n","export const readTextFile = async (blob: Blob, encoding?: string) => new Promise<string>(\n  (res, rej) => {\n    const reader = new FileReader()\n    reader.addEventListener('load', () => {\n      const { result } = reader\n      // @ts-ignore\n      res(result)\n    })\n    reader.addEventListener('error', (error) => {\n      rej(error)\n    })\n    reader.readAsText(blob, encoding)\n  },\n)\n","import React from 'react'\nimport { JsonEditor as Editor } from 'jsoneditor-react'\nimport ace from 'brace'\nimport 'brace/mode/json'\nimport 'brace/theme/github'\nimport 'brace/theme/tomorrow_night_blue'\n\nexport type JSONEditorProps = {\n  value: any\n  onChange: (value: any) => void\n}\n\nexport const JSONEditor = (props: JSONEditorProps) => {\n  const {\n    onChange,\n    value,\n  } = props\n  return (\n    <>\n      <Editor\n        ref={(ref)=> console.log('REF',ref)}\n        htmlElementProps={{\n          style: {\n            width: '100%',\n            height: '100%',\n          },\n        }}\n        ace={ace}\n        value={value}\n        onChange={onChange}\n        theme=\"ace/theme/tomorrow_night_blue\"\n      />\n    </>\n  )\n}\n","import React from 'react'\nimport {\n  ScrollView as NativeScrollView,\n  StyleProp,\n  ViewStyle,\n} from 'react-native'\nimport { Paper, PaperProps } from '@components/Paper'\nimport { KeyboardAvoidingView, Spinner } from 'native-base'\n\nfunction ScrollView({\n  children,\n  style,\n}: {\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n}) {\n  return (\n    <NativeScrollView\n      contentContainerStyle={[\n        {\n          flexGrow: 1,\n        },\n        style,\n      ]}\n    >\n      {children}\n    </NativeScrollView>\n  )\n}\n\ntype Props = {\n  scrollable?: boolean;\n  isLoading?: boolean;\n  hasKeyboardAvoidingView?: boolean;\n} & PaperProps\n\nexport function ScreenContainer({\n  scrollable = false,\n  hasKeyboardAvoidingView = false,\n  children,\n  isLoading,\n  ...rest\n}: Props) {\n  const Container = hasKeyboardAvoidingView\n    ? KeyboardAvoidingView\n    : React.Fragment\n  if (isLoading) {\n    return (\n      <Paper\n        style={{\n          width: '100%',\n          height: '100%',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <Spinner />\n      </Paper>\n    )\n  }\n  return (\n    <Paper\n      flex={1}\n      safeArea\n      {...rest}\n    >\n      {scrollable ? (\n        <Container\n          style={{\n            width: '100%',\n            height: '100%',\n          }}\n        >\n          <ScrollView style={{\n            width: '100%',\n            height: '100%',\n          }}\n          >\n            {children}\n          </ScrollView>\n        </Container>\n      ) : (\n        <Container\n          style={{\n            width: '100%',\n            height: '100%',\n          }}\n        >\n          {children}\n        </Container>\n      )}\n    </Paper>\n  )\n}\n","import * as ChartExamples from '@components/ChartExamples'\nimport { IconSet } from '@components/IconSet'\nimport { Lottie } from '@components/Lottie'\nimport { Paper } from '@components/Paper'\nimport * as R from 'colay/ramda'\nimport {\n  readTextFile,\n} from '@utils'\nimport * as DocumentPicker from 'expo-document-picker'\nimport {\n  Box,\n  Button, Center, Divider, FlatList,\n  Heading, HStack, PresenceTransition,\n  useBreakpointValue, useColorMode, useToast,\n  Stack,\n} from 'native-base'\nimport React from 'react'\nimport { useWindowDimensions } from 'react-native'\nimport * as Clipboard from 'expo-clipboard'\n// import { PDFDocument } from 'pdf-lib'\n// import * as R from 'colay/ramda'\nimport html2canvas from 'html2canvas'\n// import Form from 'colay-form'\nimport { JSONEditor } from '@components/JSONEditor'\nimport { ScreenContainer } from '@components/ScreenContainer'\nimport {\n  download,\n} from 'colay-ui/utils/download'\nimport { INPUT_JSON_SCHEMA } from '../constants/inputJsonSchema'\nimport { DATA as SAMPLE_DATA } from '../constants'\n\nconst CHART_KEYS = Object.keys(ChartExamples).sort((a, b) => b > a)\n\nexport const HomeScreen = (props: any) => {\n  const { } = props\n  const toast = useToast()\n  const windowDimensions = useWindowDimensions()\n  const initialData = React.useMemo(() => {\n    const urlSearchParams = new URLSearchParams(window.location.search)\n    const params = Object.fromEntries(urlSearchParams.entries())\n    return params?.data && JSON.parse(params?.data)\n  }, [])\n  const [data, setData] = React.useState(initialData)\n  const [status, setStatus] = React.useState('idle')\n  const [formVisible, setFormVisible] = React.useState(false)\n  const { toggleColorMode } = useColorMode()\n  const numColumns = useBreakpointValue({\n    base: 1,\n    md: 1,\n  })\n  const onCreateCharts = React.useCallback(\n    async () => {\n      try {\n        const result = await DocumentPicker.getDocumentAsync({ type: 'application/json' })\n        if (result.type === 'success') {\n          const fileText = await readTextFile(result.file!)\n          setData(JSON.parse(fileText))\n          setStatus('loading')\n          setTimeout(() => setStatus('idle'), 2500)\n        }\n      } catch (error) {\n        console.error(error)\n        toast.show({\n          title: 'Something went wrong',\n          status: 'error',\n          description: JSON.stringify(error),\n        })\n      }\n    },\n    [],\n  )\n  const onShare = React.useCallback(() => {\n    const link = `${window.location.origin}?${jsonToQuery({ data })}`\n    Clipboard.setString(link)\n    toast.show({\n      title: 'Share',\n      description: 'Sharing link copied to clipboard!',\n      status: 'success',\n    })\n  }, [data])\n  const onDownload = React.useCallback(\n    async () => {\n      // const pdfDoc = await PDFDocument.create()\n      // try {\n      //   let index = 0\n      //   await R.mapAsyncSeries(\n      //     async (chartName) => {\n      //       try {\n      //         const page = pdfDoc.addPage()\n      // const source = document.getElementById(`ChartContainer${chartName}`)\n      // const width = source?.scrollWidth\n      // const height = source?.scrollHeight\n      // const canvas = await html2canvas(source, {\n      //   windowWidth: source?.scrollWidth,\n      //   windowHeight: source?.scrollHeight,\n      //   width,\n      //   height,\n      // })\n      //         const arrayBuffer = await new Promise(async (res, rej) => {\n      //           canvas.toBlob((blob) => {\n      //             const reader = new FileReader()\n      //             reader.addEventListener('loadend', () => {\n      //               const arrayBuffer = reader.result\n      //               // Dispay Blob content in an Image.\n      //               const blob = new Blob([arrayBuffer], { type: 'image/jpg' })\n      //               res(arrayBuffer)\n      //             })\n      //             reader.readAsArrayBuffer(blob)\n      //           }, 'image/jpg')\n      //         })\n      //         // canvas.getContext('2d')?.scale(1 / (width / 1123), 1 / (height / 794))\n      //         await pdfDoc.embedJpg(\n      //           arrayBuffer,\n      //         )\n      //         // canvas.toBlob((blob) => {\n      //         //   window.open(URL.createObjectURL(blob), '__blank')\n      //         // })\n      //         index += 1\n      //       } catch (error) {\n      //         console.log(error)\n      //       }\n      //       return 1\n      //     },\n      //   )(CHART_KEYS)\n      //   console.log('FINISH')\n      //   const pdfBytes = await pdfDoc.save()\n\n      // Trigger the browser to download the PDF document\n      // download(pdfBytes, {\n      //   name: 'pdf-lib_image_embedding_example.pdf',\n      //   mimeType: '\"application/pdf\"',\n      // })\n      // } catch (error) {\n      //   console.error(error)\n      //   toast.show({\n      //     title: 'Something went wrong',\n      //     status: 'error',\n      //     description: error.message,\n      //   })\n      // }\n      const source = document.getElementById('ChartContainer')\n      const width = source?.scrollWidth\n      const height = source?.scrollHeight\n      const canvas = await html2canvas(source, {\n        windowWidth: source?.scrollWidth,\n        windowHeight: source?.scrollHeight,\n        width,\n        height,\n      })\n      canvas.toBlob((blob) => {\n        window.open(URL.createObjectURL(blob), '__blank')\n        download(blob, {\n          name: 'charts.jpeg',\n          // mimeType: '\"application/pdf\"',\n        })\n      })\n    },\n    [data],\n  )\n  const onPressUpdateData = () => R.callLater(\n    () => setFormVisible(!formVisible),\n    0,\n  )\n  const onUpdateData = React.useMemo(() => R.debounce(\n    ({ formData }) => {\n      setTimeout(() => setData(formData), 0)\n    },\n    300,\n  ), [])\n  if (status === 'loading') {\n    return (\n      <Paper\n        flex={1}\n      >\n        <Center\n          flex={1}\n          w=\"100%\"\n        >\n          <Lottie\n            source={{\n              uri: 'https://assets5.lottiefiles.com/packages/lf20_yJ8wNO.json',\n            }}\n            style={{\n              width: '55%',\n              height: '65%',\n            }}\n            resizeMode=\"cover\"\n          />\n          <Heading\n            size=\"md\"\n            fontWeight=\"bold\"\n          >\n            We're building your charts...\n          </Heading>\n        </Center>\n      </Paper>\n    )\n  }\n\n  return (\n    <ScreenContainer\n      scrollable\n    >\n      <Box\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        p={3}\n      >\n        <Heading\n          size=\"lg\"\n          fontWeight=\"bold\"\n        >\n          {/* {data ? 'Results' : 'Chart Creator' } */}\n          Chart Creator\n        </Heading>\n        <HStack\n          space=\"sm\"\n          alignItems=\"center\"\n        >\n          <IconSet\n            name=\"theme-light-dark\"\n            onPress={toggleColorMode}\n          />\n\n          {\n          data\n          && (\n            false && (\n              <Button\n                onPress={onDownload}\n              >\n                Download\n              </Button>\n            )\n          )\n}\n          {\n          data\n          && (\n            (\n            <Button\n              onPress={onShare}\n            >\n              Share\n            </Button>\n            )\n          )\n}\n          {\n          data\n          && true && (\n          <Button\n            onPress={onPressUpdateData}\n          >\n            { formVisible ? 'Close Form' : 'Update Data'}\n          </Button>\n          )\n}\n          <Button\n            onPress={onCreateCharts}\n          >\n            Create Charts\n          </Button>\n        </HStack>\n      </Box>\n      <Divider w=\"100%\" />\n      {\n        !data\n          ? (\n            <>\n              <Center\n                flex={1}\n              >\n                <Lottie\n                  source={{\n                    uri: 'https://assets6.lottiefiles.com/packages/lf20_q5qeoo3q.json',\n                  }}\n                  style={{\n                    width: '65%',\n                    height: '73%',\n                  }}\n                  resizeMode=\"cover\"\n                />\n                <Heading\n                  size=\"md\"\n                  fontWeight=\"bold\"\n                >\n                  Let's Build Perfect Charts!\n                </Heading>\n              </Center>\n            </>\n          )\n          : (\n            <>\n              <PresenceTransition\n                visible\n                initial={{\n                  opacity: 0,\n                  scale: 0,\n                }}\n                animate={{\n                  opacity: 1,\n                  scale: 1,\n                  transition: {\n                    duration: 1000,\n                  },\n                }}\n                style={{\n                  width: '100%',\n                  height: '90%',\n                }}\n              >\n                <Stack\n                  direction=\"row\"\n                  space={2}\n                  height=\"100%\"\n                >\n                  <Center\n                    flex={1}\n                  >\n                    <FlatList\n                      key={`FlatList:${numColumns}`}\n                      style={{\n                        flex: 1,\n                      }}\n                      nativeID=\"ChartContainer\"\n                  // extraData={[window.width]}\n                      numColumns={numColumns}\n                      data={CHART_KEYS}// CHART_KEYS}\n                      {...(\n                  numColumns > 1\n                    ? {\n                      columnWrapperStyle: {\n                        justifyContent: 'space-around',\n                      },\n                    }\n                    : {}\n                    )}\n                      renderItem={({ item: chartName }) => {\n                        const Chart = ChartExamples[chartName]\n                        return (\n                          <Box\n                            p={2}\n                            h={400}\n                            w={windowDimensions.width}\n                            alignItems=\"center\"\n                            justifyContent=\"center\"\n                            nativeID={`ChartContainer${chartName}`}\n                          >\n                            <Chart\n                              data={data[chartName]}\n                            />\n                          </Box>\n                        )\n                      }}\n                    />\n                  </Center>\n                  {\n              formVisible && (\n                <Stack\n                  flex={1}\n                  // height={500}\n                  height=\"100%\"\n                >\n                  {/* <Form\n                    formData={data}\n                    schema={INPUT_JSON_SCHEMA}\n                    onChange={onUpdateData}\n                  /> */}\n                  <JSONEditor\n                    value={data}\n                    onChange={(value) => onUpdateData({ formData: value })}\n                  />\n                </Stack>\n              )\n            }\n                </Stack>\n\n              </PresenceTransition>\n\n            </>\n          )\n      }\n    </ScreenContainer>\n  )\n}\n\nconst jsonToQuery = (obj: any) => {\n  const str = []\n  for (const p in obj) {\n    if (obj.hasOwnProperty(p)) {\n      str.push(`${encodeURIComponent(p)}=${encodeURIComponent(JSON.stringify(obj[p]))}`)\n    }\n  }\n  return str.join('&')\n}\n","import {\n  ApolloProvider,\n} from '@apollo/client'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport { StatusBar } from 'expo-status-bar'\nimport {\n  ColorMode, extendTheme, NativeBaseProvider, StorageManager,\n} from 'native-base'\nimport React from 'react'\nimport 'react-native-gesture-handler'\nimport './config'\n// import { apolloClient } from './config/apollo'\nimport useInitializer from './hooks/useInitializer'\n// import useColorScheme from './hooks/useColorScheme'\n// import Navigation from './navigation'\nimport { HomeScreen } from './screens/HomeScreen'\n\nconst colorModeManager: StorageManager = {\n  get: async () => {\n    try {\n      const val = await AsyncStorage.getItem('@color-mode')\n      return val === 'dark' ? 'dark' : 'light'\n    } catch (e) {\n      return 'light'\n    }\n  },\n  set: async (value: ColorMode) => {\n    try {\n      await AsyncStorage.setItem('@color-mode', value)\n    } catch (e) {\n      console.log(e)\n    }\n  },\n}\n\nexport default function App() {\n  const isLoadingComplete = useInitializer()\n  // const colorScheme = useColorScheme()\n\n  if (!isLoadingComplete) {\n    return null\n  }\n  return (\n  // <ApolloProvider client={apolloClient}>\n    <NativeBaseProvider\n      config={NATIVE_BASE_CONFIG}\n      colorModeManager={colorModeManager}\n    >\n      {/* <Navigation colorScheme={colorScheme} /> */}\n      {/* <Example /> */}\n      <HomeScreen />\n      <StatusBar />\n    </NativeBaseProvider>\n  // </ApolloProvider>\n  )\n}\n\nconst NATIVE_BASE_CONFIG = {\n  dependencies: {\n    'linear-gradient': require('expo-linear-gradient').LinearGradient,\n  },\n  theme: extendTheme({\n    config: { initialColorMode: 'dark' },\n    colors: {\n      primary: {\n        50: '#dff1ff',\n        100: '#b1d2ff',\n        200: '#81b4fd',\n        300: '#5197f9',\n        400: '#2279f6',\n        500: '#095fdd',\n        600: '#014aad',\n        700: '#00357d',\n        800: '#00204e',\n        900: '#000b20',\n      },\n    },\n    components: {\n      Button: {\n        // Can simply pass default props to change default behaviour of components.\n        baseStyle: {\n          // rounded: 'md',\n        },\n        defaultProps: {\n\n        },\n        variants: {\n          linearGradient: () => ({\n            p: 0,\n            _stack: {\n              p: 2,\n              bg: {\n                linearGradient: {\n                  colors: ['violet.800', 'lightBlue.300'],\n                  start: [0, 0],\n                  end: [1, 0],\n                },\n              },\n              rounded: 'lg',\n            },\n            rounded: 'lg',\n          }),\n        },\n      },\n    },\n  }),\n}\n","import { Ionicons } from '@expo/vector-icons'\nimport * as Font from 'expo-font'\nimport * as SplashScreen from 'expo-splash-screen'\nimport * as React from 'react'\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false)\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync()\n\n        // Load fonts\n        // await Font.loadAsync({\n        //   ...Ionicons.font,\n        //   'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        // });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e)\n      } finally {\n        setLoadingComplete(true)\n        SplashScreen.hideAsync()\n      }\n    }\n\n    loadResourcesAndDataAsync()\n  }, [])\n\n  return isLoadingComplete\n}\n"],"sourceRoot":""}